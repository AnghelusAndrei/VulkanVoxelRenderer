#version 460

// Compute shader layout
layout(local_size_x = 8, local_size_y = 8) in;


// Constants
const uint maxDepth = 15;

// Specialization constants 

layout(constant_id=0) const uint screenWidth = 800;
layout(constant_id=1) const uint screenHeight = 600;
layout(constant_id=2) const uint octreeDepth = 8;

const uvec2 screenSize=uvec2(screenWidth, screenHeight);


layout(std140, set=0, binding=0) uniform UniformBufferObject {
    vec3 position;
    vec3 direction;
    vec3 cameraPlanVector;
    vec3 cameraPlanSurfaceRightVector;
    vec3 cameraPlanSurfaceUpVector;
} ubo;


layout(std430, set=0, binding=1) readonly buffer OctreeBuffer {
    uint data[];
} octree;

layout(std140, set=0, binding=2) writeonly buffer LightingBuffer {
    vec4 data[];
} lighting;
 
layout(rgba8, set=0, binding=3) uniform writeonly image2D OutputImage;

#define max_depth 15
#define f_error 0.01


uint octreeLength;

const uint contained_mask[] = {
    4294967295,4294967294,4294967292,4294967288,4294967280,4294967264,4294967232,4294967168,
    4294967040,4294966784,4294966272,4294965248,4294963200,4294959104,4294950912,4294934528
};

const uint isNode_mask=1;
const uint n_count_mask=15;
const uint n_next_mask=2147483632;
const uint l_type_mask=254;
const uint l_data_x_mask=65280;
const uint l_data_y_mask=16711680;
const uint l_data_z_mask=2139095040;
const uint data_mask=4294967040;

struct Node{
    bool isNode; // 1 bit
    uint n_count; // 3 bits
    uint n_next; // 28 bits
    int l_type; // 7 bits
    uvec3 l_data; // 24 bits
};


Node readNode(uint data){
    Node node;
    node.isNode = bool(data & isNode_mask);

    if(node.isNode){
        node.n_count = uint((data & n_count_mask) >> 1);
        node.n_next = uint((data & n_next_mask) >> 4);

        return node;
    }

    node.l_type = int((data & l_type_mask) >> 1);
    node.l_data.x = uint((data >> 8)&0xFF);
    node.l_data.y = uint((data >> 16)&0xFF);
    node.l_data.z = uint((data >> 24)&0xFF);

    return node;
}

bool inBounds(vec3 v, float n) {return 0<=v.x&&v.x<=n &&0<=v.y&&v.y<=n&&0<=v.z&&v.z<n;}

uint utils_locate(uvec3 position, uint p2){
    return 
    (int(bool(position.x & p2)) << 2) | 
    (int(bool(position.y & p2)) << 1) | 
    (int(bool(position.z & p2)));
}
bool utils_contained(uvec3 position1, uvec3 position2, uint mask){
    return 
    ((position1.x ^ (~position2.x)) >= mask) && 
    ((position1.y ^ (~position2.y)) >= mask) && 
    ((position1.z ^ (~position2.z)) >= mask);
}


struct voxel_t{
    bool hit;
    uint id;
};

struct ray_t{
    vec3 origin;
    vec3 direction;
    vec3 inverted_direction;
};

struct leaf_t{
    uint id;
    uint size;
    vec3 position;
};

vec4 intersect(vec3 inversed_ray_direction, vec3 ray_origin, vec3 ray_direction, vec3 box_min, vec3 box_max){
    vec4 intersection = vec4(0,0,0,0);

    float t1 = (box_min.x - ray_origin.x)*inversed_ray_direction.x;
    float t2 = (box_max.x - ray_origin.x)*inversed_ray_direction.x;

    float tmin = min(t1,t2);
    float tmax = max(t1,t2);

    t1 = (box_min.y - ray_origin.y)*inversed_ray_direction.y;
    t2 = (box_max.y - ray_origin.y)*inversed_ray_direction.y;

    tmin = max(tmin, min(t1,t2));
    tmax = min(tmax, max(t1,t2));

    t1 = (box_min.z - ray_origin.z)*inversed_ray_direction.z;
    t2 = (box_max.z - ray_origin.z)*inversed_ray_direction.z;

    tmin = max(tmin, min(t1,t2));
    tmax = min(tmax, max(t1,t2));

    intersection.w = float((tmax >= tmin && tmax >= 0) ? 1 : -1);
    if(intersection.w < 0)return intersection;

    intersection = vec4(vec3((tmin + f_error) * ray_direction + ray_origin),1);

    return intersection;
}

vec3 intersect_inside(vec3 inversed_ray_direction, vec3 ray_origin, vec3 ray_direction, vec3 box_min, vec3 box_max){
    vec3 intersection = vec3(0,0,0);

    float t1 = (box_min.x - ray_origin.x)*inversed_ray_direction.x;
    float t2 = (box_max.x - ray_origin.x)*inversed_ray_direction.x;

    float tmin = min(t1,t2);
    float tmax = max(t1,t2);

    t1 = (box_min.y - ray_origin.y)*inversed_ray_direction.y;
    t2 = (box_max.y - ray_origin.y)*inversed_ray_direction.y;

    tmin = max(tmin, min(t1,t2));
    tmax = min(tmax, max(t1,t2));

    t1 = (box_min.z - ray_origin.z)*inversed_ray_direction.z;
    t2 = (box_max.z - ray_origin.z)*inversed_ray_direction.z;

    tmin = max(tmin, min(t1,t2));
    tmax = min(tmax, max(t1,t2));


    intersection = vec3((tmax + f_error) * ray_direction + ray_origin);

    return intersection;
}

voxel_t Raycast_stackBased(ray_t ray){
    uint p2c[max_depth];
    for(int i = 0; i <= octreeDepth; i++){
        p2c[i] = octreeLength>>i;
    }

    voxel_t voxel;

    voxel.hit = false;
    voxel.id = 0;

    //a stack of parent nodes in the octree
    //using this makes leaf lookup much faster
    uint nodeStack[max_depth];
    nodeStack[0] = 0;
    uint offset = 0;
    uint depth = 0;

    //intersect ray with octree bounding box
    vec3 l_pos;
    vec3 r_pos;
    if(inBounds(ray.origin, octreeLength))r_pos = ray.origin;
    else{
        vec4 intersection = intersect(ray.inverted_direction, ray.origin, ray.direction, vec3(0,0,0), vec3(octreeLength,octreeLength,octreeLength));
        if(intersection.w < 0)return voxel;
        r_pos = intersection.xyz;
    }
    l_pos = r_pos;

    leaf_t target;

    //q is to make sure the gpu doesn't get stuck
    uint q = 0;

    //TODO: good hierarchy system
    while(inBounds(r_pos, octreeLength)){
        //find the octree leaf coresponding to the ray's current position
        uvec3 ur_pos = uvec3(r_pos);
        uvec3 ul_pos = uvec3(l_pos);
        
        //check if the current position and the last position are contained in the traversal node 
        if(q > 0){
            while(!utils_contained(ur_pos, ul_pos, contained_mask[octreeDepth - depth]) && depth > 0){
                depth--;
            }
            offset = nodeStack[depth];
            depth++;
        }

        //leaf lookup
        bool foundLeaf = false;
        for (depth ; depth < octreeDepth-1; depth++)
        {
            offset += utils_locate(ur_pos, p2c[depth]);

            Node leaf;
            leaf.isNode = bool(octree.data[offset] & 1);
            if(!leaf.isNode){
                target.size = p2c[depth];
                uint size = target.size - 1;
                target.position = uvec3(
                    ur_pos.x & (~(size)), 
                    ur_pos.y & (~(size)), 
                    ur_pos.z & (~(size))
                );
                foundLeaf = true;
                break;
            }
            leaf.n_next = uint((octree.data[offset] & 2147483632) >> 4);
            nodeStack[depth] = leaf.n_next;
            offset = leaf.n_next;
        }
        if(!foundLeaf){
            offset += utils_locate(ur_pos, p2c[depth]);
            Node leaf;
            leaf.l_type = int((octree.data[offset] & 254) >> 1);
            if(leaf.l_type == 1){
                voxel.id = offset;
                voxel.hit = true;
                return voxel;
            }
            target.size = p2c[depth];
            uint size = target.size - 1;
            target.position = uvec3(
                ur_pos.x & (~(size)), 
                ur_pos.y & (~(size)), 
                ur_pos.z & (~(size))
            );
        }


        l_pos = r_pos;
        r_pos = intersect_inside(ray.inverted_direction, ray.origin, ray.direction, vec3(target.position), vec3(target.position.x + target.size, target.position.y + target.size, target.position.z + target.size));

        if(q > 65)return voxel;
        q++;
    }
    return voxel;
}

voxel_t Raycast(ray_t ray){
    uint p2c[max_depth];
    for(int i = 0; i <= octreeDepth; i++){
        p2c[i] = octreeLength>>i;
    }

    voxel_t voxel;

    voxel.hit = false;
    voxel.id = 0;

    //a stack of parent nodes in the octree
    //using this makes leaf lookup much faster
    //uint nodeStack[max_depth];
    //nodeStack[0] = 0;
    uint offset = 0;
    uint depth = 0;

    //intersect ray with octree bounding box
    vec3 l_pos;
    vec3 r_pos;
    if(inBounds(ray.origin, octreeLength))r_pos = ray.origin;
    else{
        vec4 intersection = intersect(ray.inverted_direction, ray.origin, ray.direction, vec3(0,0,0), vec3(octreeLength,octreeLength,octreeLength));
        if(intersection.w < 0)return voxel;
        r_pos = intersection.xyz;
    }
    l_pos = r_pos;

    leaf_t target;

    //q is to make sure the gpu doesn't get stuck
    uint q = 0;

    //TODO: good hierarchy system
    while(inBounds(r_pos, octreeLength)){
        //find the octree leaf coresponding to the ray's current position
        uvec3 ur_pos = uvec3(r_pos);
        uvec3 ul_pos = uvec3(l_pos);
        
        //check if the current position and the last position are contained in the traversal node 
        /*if(q > 0){
            while(!utils_contained(ur_pos, ul_pos, contained_mask[octreeDepth - depth]) && depth > 0){
                depth--;
            }
            offset = nodeStack[depth];
            depth++;
        }*/

        //leaf lookup
        depth = 0;
        offset = 0;
        bool foundLeaf = false;
        for (depth ; depth < octreeDepth-1; depth++)
        {
            offset += utils_locate(ur_pos, p2c[depth]);

            Node leaf;
            leaf.isNode = bool(octree.data[offset] & 1);
            if(!leaf.isNode){
                target.size = p2c[depth];
                uint size = target.size - 1;
                target.position = uvec3(
                    ur_pos.x & (~(size)), 
                    ur_pos.y & (~(size)), 
                    ur_pos.z & (~(size))
                );
                foundLeaf = true;
                break;
            }
            leaf.n_next = uint((octree.data[offset] & 2147483632) >> 4);
            //nodeStack[depth] = leaf.n_next;
            offset = leaf.n_next;
        }
        if(!foundLeaf){
            offset += utils_locate(ur_pos, p2c[depth]);
            Node leaf;
            leaf.l_type = int((octree.data[offset] & 254) >> 1);
            if(leaf.l_type == 1){
                voxel.id = offset;
                voxel.hit = true;
                return voxel;
            }
            target.size = p2c[depth];
            uint size = target.size - 1;
            target.position = uvec3(
                ur_pos.x & (~(size)), 
                ur_pos.y & (~(size)), 
                ur_pos.z & (~(size))
            );
        }


        l_pos = r_pos;
        r_pos = intersect_inside(ray.inverted_direction, ray.origin, ray.direction, vec3(target.position), vec3(target.position.x + target.size, target.position.y + target.size, target.position.z + target.size));

        if(q > 65)return voxel;
        q++;
    }
    return voxel;
}


vec4 packIndex(uint index) {
    float x = uintBitsToFloat(index & 0xFF000000);
    float y = uintBitsToFloat(index & 0x00FF0000);
    float z = uintBitsToFloat(index & 0x0000FF00);
    float w = uintBitsToFloat(index & 0x000000FF);
    vec4 result = vec4(x,y,z,w);
    return result;
}

void main()
{
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    octreeLength = 1<<octreeDepth;

    vec2 camera_plan_position = vec2(2 * (float(pixel_coords.x) / float(screenWidth)) - 1, 2 * (float(pixel_coords.y) / float(screenHeight)) - 1);
    vec3 vector_to_point = normalize(ubo.cameraPlanVector + camera_plan_position.x * ubo.cameraPlanSurfaceRightVector - camera_plan_position.y * ubo.cameraPlanSurfaceUpVector);


    ray_t Ray;
    Ray.origin = ubo.position;
    Ray.direction = vector_to_point;
    Ray.inverted_direction = 1/vector_to_point;

    voxel_t voxel = Raycast(Ray);

    vec3 color = vec3(0,0,0);
    if(voxel.hit){
        Node voxel_node = readNode(octree.data[voxel.id]);
        color += vec3(voxel_node.l_data.z/255.0,voxel_node.l_data.y/255.0,voxel_node.l_data.x/255.0);
    }

    imageStore(OutputImage, pixel_coords, vec4(color,1));


    //imageStore(OutputImage, pixel_coords, packIndex(voxel.id));
}